name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 当推送 v* 标签时触发
  workflow_dispatch:  # 允许手动触发

permissions:
  contents: write  # 需要写权限来创建 release
  packages: read   # 可能需要读取包的权限

jobs:
  build:
    name: Build ${{ matrix.os }} binary
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # 不要因为一个平台失败就取消其他平台
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            extension: ""
          - os: windows-latest
            platform: windows
            arch: x64
            extension: ".exe"
          # - os: macos-15-large  # 使用最新的 macOS 15 x64
          #   platform: macos
          #   arch: x64
          #   extension: ""
          - os: macos-15  # 使用最新的 macOS 15 ARM64
            platform: macos
            arch: arm64
            extension: ""
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install timeout command (macOS)
      if: matrix.platform == 'macos'
      run: |
        brew install coreutils
    
    - name: Install dependencies
      run: |
        uv sync --extra build
    
    - name: Create PyInstaller spec file
      shell: bash
      run: |
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          # ARM64 spec file
          cat > nage.spec << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-
        
        block_cipher = None
        
        a = Analysis(
            ['nage/__main__.py'],
            pathex=[],
            binaries=[],
            datas=[],
            hiddenimports=['click', 'openai', 'pyperclip', 'nage.ai_client', 'nage.setting', 'nage.parse'],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )
        
        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
        
        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            [],
            name='nage',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=False,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=True,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch='arm64',
            codesign_identity=None,
            entitlements_file=None,
        )
        EOF
        else
          # x64 spec file
          cat > nage.spec << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-
        
        block_cipher = None
        
        a = Analysis(
            ['nage/__main__.py'],
            pathex=[],
            binaries=[],
            datas=[],
            hiddenimports=['click', 'openai', 'pyperclip', 'nage.ai_client', 'nage.setting', 'nage.parse'],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )
        
        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
        
        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            [],
            name='nage',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=False,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=True,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch='x86_64',
            codesign_identity=None,
            entitlements_file=None,
        )
        EOF
        fi
    
    - name: Build with PyInstaller
      run: |
        uv run --extra build pyinstaller --clean nage.spec
    
    - name: Rename binary
      shell: bash
      run: |
        if [ "${{ matrix.platform }}" = "macos" ]; then
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            mv dist/nage${{ matrix.extension }} dist/nage-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.extension }}
          else
            mv dist/nage${{ matrix.extension }} dist/nage-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.extension }}
          fi
        else
          mv dist/nage${{ matrix.extension }} dist/nage-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.extension }}
        fi
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: nage-${{ matrix.platform }}-${{ matrix.arch }}
        path: dist/nage-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.extension }}
        retention-days: 30

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v5
      with:
        path: artifacts/
    
    - name: List artifacts (debug)
      run: |
        echo "Artifacts structure:"
        find artifacts/ -type f -name "*" | head -20
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        draft: false
        prerelease: false
        generate_release_notes: true
        files: artifacts/*/nage-*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


